service: new-employee-portal-app
provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: us-east-1
  environment:
    DYNAMODB_TABLE_NAME: ${self:custom.employeeTable}
    EMPLOYEE_ID_TABLE: ${self:custom.employeeIdTable}
custom:
  employeeTable: new-employee-table-${self:provider.stage}
  employeeIdTable: emp-id-table-${self:provider.stage}
plugins:
  - serverless-iam-roles-per-function
functions:
    #Create Experience Details      
  empPortal:
    handler: api.employeeDetails
    name: api
    memorySize: 128
    timeout: 5
    events:
      - http:
          path: createEmpDetails
          method: POST
          cors: true
      - http:
          path: updateEmpDetails/{employeeId}
          method: PUT
          cors: true
      - http:
          path: getEmpDetails/{employeeId}
          method: GET
          cors: true
      - http:
          path: getAllEmpDetails
          method: GET
          cors: true
      - http:
          path: deleteEmpDetails/{employeeId}
          method: DELETE
          cors: true
      - http:
          path: softDeleteEmpDetails/{employeeId}
          method: DELETE
          cors: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
          - "dynamodb:UpdateItem"
          - "dynamodb:GetItem"
          - "dynamodb:Scan"
          - "dynamodb:DeleteItem"
        Resource:
          - !GetAtt EmployeeTable.Arn
          - !GetAtt EmployeeIdTable.Arn

  employeePortal:
    handler: api.employeeExperience
    name: experience-api
    memorySize: 128
    timeout: 5
    events:
      - http:
          method: POST
          path: saveExperienceInfo
          cors: true
      - http:
          method: PUT
          path: updateExperienceInfo/{employeeId}
          cors: true
      - http:
          method: GET
          path: getEmployeeExperienceInfo/{employeeId}
          cors: true
      - http:
          method: GET
          path: getAllEmployeesExperienceInfo
          cors: true
      - http:
          method: DELETE
          path: deleteExperienceInfo/{employeeId}
          cors: true
      - http:
          method: DELETE
          path: softDeleteExperienceInfo/{employeeId}

resources:
  Resources:
    EmployeeTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.employeeTable}
        AttributeDefinitions:
          - AttributeName: empId
            AttributeType: S
        KeySchema:
          - AttributeName: empId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    EmployeeIdTable:
      Type: AWS::DynamoDB::Table # Define a new DynamoDB table for the serial number
      Properties:
        TableName: ${self:custom.employeeIdTable}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1